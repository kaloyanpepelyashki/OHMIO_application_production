// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

class PintunnelData {
  final String schema;
  final String table;
  final String commitTimestamp;
  final String eventType;
  final New pintunnelDataNew;
  final Old old;
  final dynamic errors;

  PintunnelData({
    required this.schema,
    required this.table,
    required this.commitTimestamp,
    required this.eventType,
    required this.pintunnelDataNew,
    required this.old,
    required this.errors,
  });

  static List<PintunnelData> fromJsonList(List<dynamic> jsonList) {
    return jsonList
        .map((json) => PintunnelData(
              schema: json['schema'],
              table: json['table'],
              commitTimestamp: json['commitTimestamp'],
              eventType: json['eventType'],
              pintunnelDataNew: New.fromJson(json['new']),
              old: Old.fromJson(json['old']),
              errors: json['errors'],
            ))
        .toList();
  }

  static PintunnelData fromJson(Map<String, dynamic> json) {
    return PintunnelData(
      schema: json['schema'],
      table: json['table'],
      commitTimestamp: json['commitTimestamp'],
      eventType: json['eventType'],
      pintunnelDataNew: New.fromJson(json['new']),
      old: Old.fromJson(json['old']),
      errors: json['errors'],
    );
  }
}

class Old {
  Old();

  static Old fromJson(Map<String, dynamic> json) {
    return Old();
  }
}

class New {
  int cfgCode;
  double data;
  String id;
  String pintunnelId;
  String time;

  New({
    required this.cfgCode,
    required this.data,
    required this.id,
    required this.pintunnelId,
    required this.time,
  });

  static New fromJson(Map<String, dynamic> json) {
    return New(
        cfgCode: json['cfg_code'],
        data: json['data'].toDouble(),
        id: json['id'],
        pintunnelId: json['pintunnel_id'],
        time: json['time']);
  }
}
